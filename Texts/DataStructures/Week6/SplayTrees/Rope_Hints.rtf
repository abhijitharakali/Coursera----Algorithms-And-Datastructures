{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red42\green44\blue46;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c21569\c22745\c23529;\cssrgb\c100000\c100000\c100000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww21140\viewh13420\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
Size has to be updated after each rotation/splaying operation\
\
\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
I stored one char in each node. Initially I construct the BST so that if the char's position in the string is smaller, it will be a left child. In other words, the position of the characters in the string is used to maintain the BST. Remember that all the splay operations will not change the property of the BST, so the position can always be maintained. This allows us to know a node's position in the string by knowing it position in its in-order traversal. An easy way to do so is: pos = node.left.size + 1. This is one crucial point that helps me solve the problem. We can use this position information to do insertion, deletion and other operations instead of using the key value.\
\cb1 \
\cb3 Note that insertion operation can insert a subtree to a specified position as well. We can use split, merge, insert to change the resultant string. Then the final resultant result would just be the in-order traversal of the BST.\cb1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\fs28 \cf2 \cb3 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Don't use recursion for find() or in-order traversal. Even when they pass tests, they fail in the grader (and kept failing after I specified the recursion limit and stack size)\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Seemingly obvious but just as crucial: make sure you are finding and splitting before/after the right nodes! A great way to watch this is by plugging your code into the visualization website at pythontutor.com (if using Python. I believe this website also accommodates C, C++, Java, Javascript, and Ruby)\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
As always, take a step back and think through exactly what needs to happen in your algorithm. When do you need to insert? What segment needs to be inserted at that point? Where should it be inserted? What should it look like immediately before and after that insertion?
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
-Reuse the splay tree from set_range_sum. Replace int key with char key, long long sum with size.\cb1 \
\cb3 -Change update to update the size instead of sum (node size is 1 + left size + right size)\cb1 \
\cb3 -Change find() to orderstatistic function shown in the videos, I used an iterative version\cb1 \
\cb3 -Write a function to give in order traversal of your splay tree\cb1 \
\cb3 -In your process function split from right to left, as suggested by other users. Meaning: split at j + 1, then at i. Merge from left to right. My process used three splits and three merges\
\
Reuse splay tree from set_range_sum\cb1 \
\cb3 - Change Vertex field members to support char (or index of char in string) and size\cb1 \
\cb3 - Change update function to recompute size (check RecomputeSize)\cb1 \
\cb3 - (Re)implement find function in terms of OrderStatistics\cb1 \
\cb3 - there are 3 splits and 3 merges in process function\cb1 \
\
\cb3 Another big tip is, build a visualization to dump all phases of processing.\cb1 \
\cb3 And think about how could be a flattened tree. As the example below:\cb1 \
\
\cb3 Root tree flattened with links: -1- d -2- t -3- a -4- a -5-\cb1 \
\cb3 string indices: 0 1 2 3\cb1 \
\
\cb3 root:\cb1 \
\cb3 a (size: 4 parent: -)\cb1 \
\cb3 -- a (size: 3 parent: a)\cb1 \
\cb3 -- -- t (size: 2 parent: a)\cb1 \
\cb3 -- -- -- d (size: 1 parent: t)\cb1 \
\cb3 -- -- -- Nil\cb1 \
\cb3 -- -- Nil\cb1 \
\cb3 -- Nil\cb1 \
\cb3 inorder: dtaa\cb1 \
\cb3 from: 1 to: 1 inserting after: 2\cb1 \
\cb3 left:\cb1 \
\cb3 t (size: 2 parent: -)\cb1 \
\cb3 -- d (size: 1 parent: t)\cb1 \
\cb3 -- Nil\cb1 \
\cb3 right:\cb1 \
\cb3 a (size: 2 parent: -)\cb1 \
\cb3 -- Nil\cb1 \
\cb3 -- a (size: 1 parent: a)\cb1 \
\cb3 left:\cb1 \
\cb3 d (size: 1 parent: -)\cb1 \
\cb3 middle:\cb1 \
\cb3 t (size: 1 parent: -)\cb1 \
\cb3 right:\cb1 \
\cb3 a (size: 3 parent: -)\cb1 \
\cb3 -- d (size: 1 parent: a)\cb1 \
\cb3 -- a (size: 1 parent: a)\cb1 \
\cb3 inorder: daa\cb1 \
\cb3 after 2:\cb1 \
\cb3 left:\cb1 \
\cb3 a (size: 2 parent: -)\cb1 \
\cb3 -- d (size: 1 parent: a)\cb1 \
\cb3 -- Nil\cb1 \
\cb3 right:\cb1 \
\cb3 a (size: 1 parent: -)\cb1 \
\cb3 root (result):\cb1 \
\cb3 a (size: 4 parent: -)\cb1 \
\cb3 -- t (size: 3 parent: a)\cb1 \
\cb3 -- -- a (size: 2 parent: t)\cb1 \
\cb3 -- -- -- d (size: 1 parent: a)\cb1 \
\cb3 -- -- -- Nil\cb1 \
\cb3 -- -- Nil\cb1 \
\cb3 -- Nil\cb1 \
\cb3 inorder: data}